
from dataclasses import dataclass
from psycopg2 import Binary

from database.dbmodels.row import Row


@dataclass
class Node(Row):

    hash: Binary
    reveal: int
    reuse: int

    @classmethod
    def table_name(cls):
        return "nodes"

    @classmethod
    def create_table(cls):
        return (f"CREATE TABLE {cls.table_name()} (node_id INTEGER GENERATED BY DEFAULT AS IDENTITY, "
                f"reveal INTEGER NOT NULL, reuse INTEGER, hash BYTEA NOT NULL)")

    @classmethod
    def get_max_block(cls):
        return f"SELECT max(reveal) AS max FROM {cls.table_name()}"

    @classmethod
    def create_index_node_id(cls):
        return f"CREATE INDEX IF NOT EXISTS {cls.table_name()}_node_id ON {cls.table_name()} (node_id)"

    @classmethod
    def drop_index_node_id(cls):
        return f"DROP INDEX IF EXISTS {cls.table_name()}_node_id"

    @classmethod
    def create_index_reveal(cls):
        return f"CREATE INDEX IF NOT EXISTS {cls.table_name()}_reveal ON {cls.table_name()} (reveal)"

    @classmethod
    def drop_index_reveal(cls):
        return f"DROP INDEX IF EXISTS {cls.table_name()}_reveal"

    @classmethod
    def create_constraint_hash(cls):
        return f"ALTER TABLE {cls.table_name()} ADD CONSTRAINT {cls.table_name()}_uniqueness_hash UNIQUE (hash)"

    @classmethod
    def drop_constraint_hash(cls):
        return f"ALTER TABLE {cls.table_name()} DROP CONSTRAINT IF EXISTS {cls.table_name()}_uniqueness_hash"
